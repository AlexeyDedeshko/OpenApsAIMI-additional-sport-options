// alexeydedeshko

package app.aaps.utils

import android.content.Context
import android.util.Log
import com.google.android.gms.wearable.PutDataMapRequest
import com.google.android.gms.wearable.Wearable
import app.aaps.core.interfaces.rx.weardata.EventData

class WearSnapshotPublisher(private val ctx: Context) {

    companion object {
        private const val TAG = "WEAR_SNAPSHOT_PUB"
        private const val PATH_SNAPSHOT = "/aaps/snapshot"
        private const val PATH_SNAPSHOT_MSG = "/aaps/snapshot_msg"
    }

    fun publish(single: EventData.SingleBg?, status: EventData.Status?) {
        // 1) –ù–∞–¥—ë–∂–Ω—ã–π –∫–∞–Ω–∞–ª: DataItem (–ª–µ–∂–∏—Ç –Ω–∞ —á–∞—Å–∞—Ö –∑–∞—Ä–∞–Ω–µ–µ)
        val req = PutDataMapRequest.create(PATH_SNAPSHOT).apply {
            if (single != null) dataMap.putString("singleJson", single.serialize())
            if (status != null) dataMap.putString("statusJson", status.serialize())

            // üî• –ö–ª—é—á–µ–≤–æ–π —Ñ–∏–∫—Å: –º–µ–Ω—è—é—â–∏–π—Å—è —Ç–∞–π–º—Å—Ç–∞–º–ø –¥–ª—è —Ñ–æ—Ä—Å-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            dataMap.putLong("heartbeat", System.currentTimeMillis())
            dataMap.putLong("nonce", System.currentTimeMillis())
        }.asPutDataRequest().setUrgent()

        Wearable.getDataClient(ctx).putDataItem(req)
            .addOnSuccessListener { Log.d(TAG, "putDataItem ok: $PATH_SNAPSHOT") }
            .addOnFailureListener { Log.e(TAG, "putDataItem fail", it) }

        // 2) –ë—ã—Å—Ç—Ä—ã–π –¥—É–±–ª—å: Message (–µ—Å–ª–∏ –µ—Å—Ç—å nodeId)
        val nodeId = WearNodeResolver.getActiveNodeId(ctx)
        if (nodeId != null && single != null) {
            val bytes = single.serialize().toByteArray()
            Wearable.getMessageClient(ctx).sendMessage(nodeId, PATH_SNAPSHOT_MSG, bytes)
                .addOnSuccessListener { Log.d(TAG, "sendMessage ok to $nodeId") }
                .addOnFailureListener { Log.e(TAG, "sendMessage fail", it) }
        }
    }}